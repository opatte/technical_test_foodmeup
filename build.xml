<?xml version="1.0" encoding="UTF-8"?>
<project name="technical-test-foodmeup" default="build">
    <property name="toolsdir" value="./bin/"/>
    <property name="basedir" value="."/>
    <property name="projectdir" location="${basedir}"/>

    <target name="build"
            depends="reports"
            description=""/>

    <target name="build-master"
            depends="reports-master"
            description=""/>

    <target name="unit"
            depends="clean,cachetoram,copy-parameters,composer,vendors,lint,phploc,pdepend,phpmd,phpcs,phpcpd,phpunit"
            description="Quick tests launched automatically"/>

    <target name="reports"
            depends="prepare-reports,cachetoram,copy-parameters,composer,vendors,permissions,lint,phploc-report,pdepend,phpmd,phpcs,phpcpd,behat-development,phpunit-report,phpdox"
            description="Quality"/>

    <target name="reports-master"
            depends="prepare-reports,cachetoram,copy-parameters,composer,vendors,permissions,lint,phploc-report,pdepend,phpmd,phpcs,phpcpd,behat-master,phpunit-report,phpdox"
            description="Quality"/>

    <target name="clean"
            unless="clean.done"
            description="Cleanup build artifacts">
        <delete dir="${basedir}/app/cache" verbose="true"/>
        <delete dir="${basedir}/app/logs" verbose="true"/>

        <delete file="${basedir}/web/app_dev.php"/>
        <delete file="${basedir}/web/app.php"/>

        <property name="clean.done" value="true"/>
    </target>

    <target name="clean-reports"
            unless="clean-reports.done"
            depends="clean"
            description="Cleanup build artifacts">
        <delete dir="${basedir}/build/api"/>
        <delete dir="${basedir}/build/coverage"/>
        <delete dir="${basedir}/build/logs"/>
        <delete dir="${basedir}/build/pdepend"/>
        <delete dir="${basedir}/build/phpdox"/>
        <delete dir="${basedir}/build/behat"/>

        <property name="clean-reports.done" value="true"/>
    </target>

    <target name="permissions" description="Set 777 on cache and log">
        <exec executable="mkdir">
            <arg value="app/cache/test/" />
        </exec>
        <exec executable="touch">
            <arg value="app/cache/test/test.db" />
        </exec>
        <exec executable="chmod">
            <arg value="777" />
            <arg value="app/cache/test/test.db" />
        </exec>
        <exec executable="chmod">
            <arg value="777" />
            <arg value="-R" />
            <arg value="app/cache" />
        </exec>
        <exec executable="chmod">
            <arg value="777" />
            <arg value="-R" />
            <arg value="app/logs" />
        </exec>
    </target>

    <target name="prepare-reports"
            unless="prepare-reports.done"
            depends="clean-reports"
            description="Prepare for build">
        <mkdir dir="${basedir}/build/api"/>
        <mkdir dir="${basedir}/build/coverage"/>
        <mkdir dir="${basedir}/build/logs"/>
        <mkdir dir="${basedir}/build/pdepend"/>
        <mkdir dir="${basedir}/build/phpdox"/>
        <mkdir dir="${basedir}/build/behat"/>
        <property name="prepare-reports.done" value="true"/>
    </target>

    <target name="cachetoram" description="Use ram to speedup cache">
        <exec executable="chmod">
            <arg value="700" />
            <arg value="${basedir}/tools/cacheToRam.sh" />
        </exec>
        <exec executable="git" outputproperty="git.branch" failifexecutionfails="false">
            <arg line="rev-parse --abbrev-ref HEAD"/>
        </exec>
        <exec executable="${basedir}/tools/cacheToRam.sh">
            <arg value="${ant.project.name}-${git.branch}" />
            <arg value="${projectdir}" />
        </exec>
    </target>

    <target name="lint" description="Perform syntax check of sourcecode files">
        <apply executable="php" failonerror="true">
            <arg value="-l" />

            <fileset dir="${basedir}/src">
                <include name="**/*.php" />
                <modified />
            </fileset>

            <fileset dir="${basedir}/src/">
                <include name="**/*Test.php" />
                <modified />
            </fileset>
        </apply>
    </target>

    <target name="phploc"
            description="Measure project size using PHPLOC and print human readable output. Intended for usage on the command line.">
        <exec executable="${toolsdir}phploc">
            <arg value="--count-tests" />
            <arg path="${basedir}/src" />
        </exec>
    </target>

    <target name="phploc-report"
            depends="prepare-reports"
            description="Measure project size using PHPLOC and log result in CSV and XML format. Intended for usage within a continuous integration environment.">
        <exec executable="${toolsdir}phploc">
            <arg value="--count-tests" />
            <arg value="--log-csv" />
            <arg path="${basedir}/build/logs/phploc.csv" />
            <arg value="--log-xml" />
            <arg path="${basedir}/build/logs/phploc.xml" />
            <arg path="${basedir}/src" />
        </exec>
    </target>

    <target name="pdepend"
            depends="prepare-reports"
            description="Calculate software metrics using PHP_Depend and log result in XML format. Intended for usage within a continuous integration environment.">
        <exec executable="${toolsdir}pdepend">
            <arg value="--jdepend-xml=${basedir}/build/logs/jdepend.xml" />
            <arg value="--jdepend-chart=${basedir}/build/pdepend/dependencies.svg" />
            <arg value="--overview-pyramid=${basedir}/build/pdepend/overview-pyramid.svg" />
            <arg path="${basedir}/src" />
        </exec>
    </target>

    <target name="phpmd"
            depends="prepare-reports"
            description="Perform project mess detection using PHPMD and log result in XML format. Intended for usage within a continuous integration environment.">
        <exec executable="${toolsdir}phpmd">
            <arg path="${basedir}/src" />
            <arg value="xml" />
            <arg path="${basedir}/build/phpmd.xml" />
            <arg value="--reportfile" />
            <arg path="${basedir}/build/logs/pmd.xml" />
        </exec>
    </target>

    <target name="phpcs"
            depends="prepare-reports"
            description="Find coding standard violations using PHP_CodeSniffer and log result in XML format. Intended for usage within a continuous integration environment.">
        <exec executable="${toolsdir}phpcs" output="/dev/null">
            <arg value="--report=checkstyle" />
            <arg value="--report-file=${basedir}/build/logs/checkstyle.xml" />
            <arg value="--standard=PSR2" />
            <arg value="--extensions=php" />
            <arg value="--ignore=autoload.php" />
            <arg path="${basedir}/src" />
        </exec>
    </target>

    <target name="phpcpd"
            depends="prepare-reports"
            description="Find duplicate code using PHPCPD and log result in XML format. Intended for usage within a continuous integration environment.">
        <exec executable="${toolsdir}phpcpd">
            <arg value="--log-pmd" />
            <arg path="${basedir}/build/logs/pmd-cpd.xml" />
            <arg path="${basedir}/src" />
        </exec>
    </target>

    <target name="phpunit"
            depends="prepare-reports"
            description="Run unit tests with PHPUnit">
        <exec executable="${toolsdir}phpunit" failonerror="true">
            <arg value="--configuration"/>
            <arg path="${basedir}/build/phpunit.xml"/>
            <arg value="--columns"/>
            <arg value="max" />
        </exec>
    </target>

    <target name="phpunit-report"
            depends="prepare-reports"
            description="Run unit tests with PHPUnit">
        <exec executable="${toolsdir}phpunit" failonerror="true">
            <arg value="--configuration"/>
            <arg path="${basedir}/build/phpunit-report.xml"/>
            <arg value="--columns"/>
            <arg value="max" />
        </exec>
    </target>

    <target name="behat-development"
            depends="prepare-reports"
            description="Run functionnal tests with Behat">
        <exec executable="${basedir}/bin/behat" failonerror="true">
            <arg value="--profile" />
            <arg value="jenkins" />
            <arg value="--config" />
            <arg path="${basedir}/behat.yml.jenkins.development.dist"/>
        </exec>
    </target>

    <target name="behat-master"
            depends="prepare-reports"
            description="Run functionnal tests with Behat">
        <exec executable="${basedir}/bin/behat" failonerror="true">
            <arg value="--profile" />
            <arg value="jenkins" />
            <arg value="--config" />
            <arg path="${basedir}/behat.yml.jenkins.master.dist"/>
        </exec>
    </target>

    <target name="phpdox"
            depends="phploc-report,phpcs,phpmd"
            description="Generate project documentation using phpDox">
        <exec executable="${toolsdir}phpdox.phar">
            <arg value="--file" />
            <arg value="${basedir}/build/phpdox.xml" />
        </exec>
    </target>


    <target name="copy-parameters" description="Copy parameters.yml file">
        <exec executable="cp" failonerror="true">
            <arg path="app/config/parameters.yml.ci" />
            <arg path="app/config/parameters.yml" />
        </exec>
    </target>

    <target name="composer" description="Install composer.phar">
        <exec executable="bash">
            <arg value="-c"/>
            <arg value="curl -s http://getcomposer.org/installer | php"/>
        </exec>
    </target>

    <target name="vendors" description="Install vendors">
        <exec executable="${basedir}/composer.phar" failonerror="true">
            <arg value="install" />
            <arg value="--dev" />
            <arg value="--prefer-dist" />
            <arg value="--no-progress" />

            <env key="SYMFONY_ENV" value="test"/>
        </exec>
    </target>
</project>
